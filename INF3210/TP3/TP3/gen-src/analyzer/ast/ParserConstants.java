/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package analyzer.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int THEN = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int FOR = 13;
  /** RegularExpression Id. */
  int SWITCH = 14;
  /** RegularExpression Id. */
  int CASE = 15;
  /** RegularExpression Id. */
  int DEF = 16;
  /** RegularExpression Id. */
  int BOOLEAN = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int MATCH = 20;
  /** RegularExpression Id. */
  int WITH = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int INPUT = 23;
  /** RegularExpression Id. */
  int OUTPUT = 24;
  /** RegularExpression Id. */
  int DEC = 25;
  /** RegularExpression Id. */
  int ENDDEC = 26;
  /** RegularExpression Id. */
  int TYPE = 27;
  /** RegularExpression Id. */
  int BOOL = 28;
  /** RegularExpression Id. */
  int NUM = 29;
  /** RegularExpression Id. */
  int ASSIGN = 30;
  /** RegularExpression Id. */
  int COMPARE = 31;
  /** RegularExpression Id. */
  int MULOP = 32;
  /** RegularExpression Id. */
  int BOOLOP = 33;
  /** RegularExpression Id. */
  int PLUS = 34;
  /** RegularExpression Id. */
  int MINUS = 35;
  /** RegularExpression Id. */
  int EQUAL = 36;
  /** RegularExpression Id. */
  int LESS = 37;
  /** RegularExpression Id. */
  int LESSEQUAL = 38;
  /** RegularExpression Id. */
  int GREAT = 39;
  /** RegularExpression Id. */
  int GREATEQUAL = 40;
  /** RegularExpression Id. */
  int DIFF = 41;
  /** RegularExpression Id. */
  int EQUALEQUAL = 42;
  /** RegularExpression Id. */
  int FOIS = 43;
  /** RegularExpression Id. */
  int DIV = 44;
  /** RegularExpression Id. */
  int MOD = 45;
  /** RegularExpression Id. */
  int POW = 46;
  /** RegularExpression Id. */
  int AND = 47;
  /** RegularExpression Id. */
  int OR = 48;
  /** RegularExpression Id. */
  int NOT = 49;
  /** RegularExpression Id. */
  int LPAREN = 50;
  /** RegularExpression Id. */
  int RPAREN = 51;
  /** RegularExpression Id. */
  int LACC = 52;
  /** RegularExpression Id. */
  int RACC = 53;
  /** RegularExpression Id. */
  int COLON = 54;
  /** RegularExpression Id. */
  int SEMICOLON = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int DIGIT = 59;
  /** RegularExpression Id. */
  int INTEGER = 60;
  /** RegularExpression Id. */
  int REAL = 61;
  /** RegularExpression Id. */
  int EXPONENT = 62;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "<BOOLEAN>",
    "\"true\"",
    "\"false\"",
    "\"match\"",
    "\"with\"",
    "\"do\"",
    "\"INPUT\"",
    "\"OUTPUT\"",
    "\"Declaration\"",
    "\"EndDeclaration\"",
    "<TYPE>",
    "\"bool\"",
    "\"num\"",
    "<ASSIGN>",
    "<COMPARE>",
    "<MULOP>",
    "<BOOLOP>",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"==\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER>",
    "<REAL>",
    "<EXPONENT>",
  };

}
