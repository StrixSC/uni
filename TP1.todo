_________________________________________
Nawras Mohammed Amin    - 1962832      /
Ragib Ahashan           - 19xxxxx     /
Pritam Patel            - 19xxxxx    /
*************************************

*Download Todo+ extension if on VSCode for markups*
To use todos 
    1.'Cmd/Ctrl+Enter'            // Triggers `Todo: Toggle Box`
    2.'Alt+D'                     // Triggers `Todo: Toggle Done`
    3.'Alt+C'                     // Triggers `Todo: Toggle Cancelled`
    4.'Alt+S'                     // Triggers `Todo: Toggle Start`
    5.'Cmd/Ctrl+Shift+A'          // Triggers `Todo: Archive`

    You'll mostly be using the first four.
    - Whenever you see the need for a new todo, add it to the list a little below using ctrl+enter`
    - Whenever you start a todo, use alt+S to signal that you've started it for the rest of us`
    - Whenever you finish a todo, use alt+D to signal that it's completed.`

    Demo here: https://raw.githubusercontent.com/fabiospampinato/vscode-todo-plus/master/resources/demo/syntax.png

`Notes`:
    Three types of objects:
        - Objects A - 1KG
        - Objects B - 3KG
        - Objects C - 6Kg

    Three types of robots: 

        For the following, m = total mass of the objects that robot is transporting. Therefore the bigger the mass, the bigger the Time.
        - Robot X: k = 1 + m        ===> The maximum weight that robot X can carry is *5KG*
        Robot X is a fast robot, but cannot lift heavy weight.
     
        - Robot Y: k = 1.5 + 0.6m   ===> The maximum weight that robot Y can carry is *10KG*
        Robot Y is a little slower than X, but can lift weight that is a little heavier.

        - Robot Z: k = 2.5 + 0.2m   ===> The maximum weight that robot Z can carry is *25KG*
        Robot Z is the slowest, but can carry the most. 
            
    Information about the graph:
        - Nodes are represented from 0 to n. 
        - The starting position of any robot is 0.
        - The return position (or ending position) of any robot is 0.
        - `THE GRAPH IS NOT ORIENTED`

    The weight for each arc is defined with the following function:
        - T = k * D.
        - Where T = Time in seconds (The path with the shortest time in seconds would ultimately be the path that has to be returned with dijkstra's
        - Where k = the caracteristic personal to the robot (or drone [pour toi ragib]) that is being used\
        - Where D = Distance between two nodes.

    - *There is a constant time of 10 seconds to take the objects (For any object & for any robot)*
   
    Information about the file 'entrepot.txt':
        - The file is separated into two parts:
            - The first part is information on each node as well as the number of objects of each type: N,A,B,C; where :
                - N is the number of the node
                - A is the number of objects A that it contains
                - B is the number of objects B that it contains
                - C is the number of objects C that it contains
            
            - The second part is information on each arc. It is represented like such: N1, N2, D; where:
                - N1 is the number of the first node.
                - N2 is the number of the second node.
                - D is the distance between the two nodes given.


`TODOS`:

    ☐ creerGraph(): @started(19-10-27 22:22)
    Creates a graph that represents the different sections of the factory, as well as the links that connect each sections together. 
    This must be done by reading a given text file. 
    
    ☐ afficherGraph():
    This function prints the graph, allowing a human-friendly view of the graph created with creerGraph.

    ☐ prendreCommande():
    This function allows the user to input the amount of each object that the drone will have to go and get.

    ☐ afficherCommande():
    This function prints the command given to the drone, allowing a human-friendly view of the command created with prendreCommande.

    ☐ plusCourtChemin():
    This function utilizes Dijkstra's algorithm to find the closest path for the drone to get the objects in the command and come back. 
    Check the notes for information on the graph. 
        The function must print the following:
            ☐ The type of drone that is being used. 
            ☐ The nodes that the drone has traversed
            ☐ When the object has been picked up at the specific node
            ☐ The total time that the drone took to complete the command. 
            ☐ If the given command returns a path that is not possible to achieve by the drone, we must print it. 
    
    ☐ Create an interface that allows the following options:
        ☐ creer un graph 
        ☐ afficher un graph 
        ☐ prendre une commande
        ☐ afficher la commande
        ☐ trouver le plus court chemin
        ☐ quitter
    
    


